import random
import logging
from unidecode import unidecode

from django.utils.text import slugify
from import_export import resources

from .models import User

logger = logging.getLogger(__name__)


class StudentResource(resources.ModelResource):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –æ—Ç—á–µ—Å—Ç–≤–æ–º –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π
        users = User.objects.values_list(
            "first_name", "last_name", "patronymic", "group_id", "username", "organization_id"
        )

        # –ö–ª—é—á —É—á–∏—Ç—ã–≤–∞–µ—Ç –§–ò–û + group_id + org_id
        self.existing_students = {
            (fn.strip().lower(), ln.strip().lower(), (pn or "").strip().lower(), gid, org)
            for fn, ln, pn, gid, u, org in users
        }

        self.existing_usernames = {u for _, _, _, _, u, _ in users}

    class Meta:
        model = User
        exclude = ("id",)
        import_id_fields = ()
        use_bulk = True
        fields = (
            "first_name",
            "last_name",
            "patronymic",   # üîë –¥–æ–±–∞–≤–ª–µ–Ω–æ
            "group",
            "username",
            "plain_password",
        )

    def before_import_row(self, row, **kwargs):
        first_name = row.get("first_name", "").strip()
        last_name = row.get("last_name", "").strip()
        patronymic = (row.get("patronymic") or "").strip()
        group_id = row.get("group")

        # –ë–µ—Ä–µ–º organization –∏–∑ request
        request = kwargs.get("request")
        organization_id = None
        if request and hasattr(request, "user") and request.user.is_authenticated:
            if hasattr(request.user, "organization_id"):
                organization_id = request.user.organization_id

        logger.info(
            f"üì• –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞: {last_name} {first_name} {patronymic}, "
            f"group={group_id}, org={organization_id}"
        )

        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–µ–π —Å —É—á–µ—Ç–æ–º –æ—Ç—á–µ—Å—Ç–≤–∞ –∏ organization
        key = (
            first_name.lower(),
            last_name.lower(),
            patronymic.lower(),
            int(group_id) if group_id else None,
            int(organization_id) if organization_id else None,
        )
        if key in self.existing_students:
            logger.warning(
                f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω: {first_name} {patronymic} {last_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç "
                f"–≤ –≥—Ä—É–ø–ø–µ {group_id}, org={organization_id}"
            )
            raise Exception(
                f"–°—Ç—É–¥–µ–Ω—Ç {first_name} {patronymic} {last_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç "
                f"–≤ –≥—Ä—É–ø–ø–µ {group_id}, org={organization_id}"
            )

        # --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è username (—Ç–æ–ª—å–∫–æ –§–∞–º–∏–ª–∏—è + –ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –ò–º–µ–Ω–∏, –æ—Ç—á–µ—Å—Ç–≤–æ –º–æ–∂–Ω–æ –Ω–µ –±—Ä–∞—Ç—å)
        try:
            transliterated = unidecode(f"{last_name}{first_name[0]}")  # –ò–≤–∞–Ω–æ–≤–ò ‚Üí ivanovi
            base_username = slugify(transliterated).lower()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ username: {e}")
            raise

        if not base_username:
            raise Exception(
                f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å username –∏–∑: {last_name} {first_name}"
            )

        username = base_username
        counter = 1
        while username in self.existing_usernames:
            username = f"{base_username}{counter}"
            counter += 1

        # --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PIN
        pin = str(random.randint(0, 9999)).zfill(4)
        logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ª–æ–≥–∏–Ω={username}, PIN={pin}")

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ row
        row["username"] = username
        row["plain_password"] = pin
        row["_raw_password"] = pin
        row["role"] = "student"
        row["organization"] = organization_id

        # –ü–æ–ø–æ–ª–Ω—è–µ–º –∫—ç—à–∏
        self.existing_students.add(key)
        self.existing_usernames.add(username)

    def before_save_instance(self, instance, row, **kwargs):
        raw_password = row.get("_raw_password")
        if raw_password:
            instance.set_password(raw_password)
            instance.plain_password = raw_password

        # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –∏–∑ request
        request = kwargs.get("request")
        if request and hasattr(request, "user") and request.user.is_authenticated:
            if hasattr(request.user, "organization"):
                instance.organization = request.user.organization

    def dehydrate_group(self, instance):
        return instance.group.name if instance.group else ""


class MentorResource(resources.ModelResource):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–¥–∏–Ω —Ä–∞–∑, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å N+1 –∑–∞–ø—Ä–æ—Å–æ–≤
        users = User.objects.values_list(
            "first_name", "last_name", "patronymic", "organization_id", "username"
        )

        self.existing_users = {
            (fn.strip().lower(), ln.strip().lower(), (pn or "").strip().lower(), org)
            for fn, ln, pn, org, _ in users
        }
        self.existing_usernames = {u for _, _, _, _, u in users}

    class Meta:
        model = User
        verbose_name = '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏'
        exclude = ('id',)
        import_id_fields = ()
        fields = (
            'first_name',
            'last_name',
            'patronymic',
            'email',
            'google_meet_link',
            'organization',
            'role',
            'username',
            'plain_password',   # ‚ö†Ô∏è –æ–ø–∞—Å–Ω–æ, –Ω–æ –æ—Å—Ç–∞–≤–ª—è—é –ø–æ–¥ —Ç–≤–æ–π –∫–µ–π—Å
        )

    def before_import_row(self, row, **kwargs):
        first_name = row.get('first_name', '').strip()
        last_name = row.get('last_name', '').strip()
        patronymic = (row.get("patronymic") or "").strip()
        organization_id = row.get('organization')

        logger.info(
            f"üì• –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ú–ï–ù–¢–û–†–ê: {last_name} {first_name} {patronymic}, org={organization_id},"
        )

        # --- –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        key = (first_name.lower(), last_name.lower(), patronymic.lower(), int(organization_id) if organization_id else None)
        if key in self.existing_users:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω: {last_name} {first_name} {patronymic} —É–∂–µ –µ—Å—Ç—å –≤ org={organization_id}")
            raise Exception(f"–ú–µ–Ω—Ç–æ—Ä {first_name} {last_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {organization_id}")

        # --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è username
        try:
            transliterated = unidecode(f"{last_name}{first_name[0]}")  # –ò–≤–∞–Ω–æ–≤–ò ‚Üí IvanovI
            base_username = slugify(transliterated).lower()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ username: {e}")
            raise

        if not base_username:
            raise Exception(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å username –∏–∑: {last_name} {first_name}")

        username = base_username
        counter = 1
        while username in self.existing_usernames:
            username = f"{base_username}{counter}"
            counter += 1

        # --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PIN
        pin = str(random.randint(0, 9999)).zfill(4)

        logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ª–æ–≥–∏–Ω={username}, PIN={pin}")

        row['username'] = username
        row['plain_password'] = pin  # ‚ö†Ô∏è –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å, –Ω–æ –æ—Å—Ç–∞–≤–ª—è—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
        row['_raw_password'] = pin
        row['role'] = 'mentor'

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–µ—à "—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö"
        self.existing_users.add(key)
        self.existing_usernames.add(username)

    def before_save_instance(self, instance, row, **kwargs):
        raw_password = row.get('_raw_password')
        if raw_password:
            instance.set_password(raw_password)
            # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –ø—Ä—è–º –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å:
            instance.plain_password = raw_password

    def dehydrate_organization(self, instance):
        return instance.organization.name if instance.organization else ''
