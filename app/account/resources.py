import random
import logging
from unidecode import unidecode

from django.utils.text import slugify
from import_export import resources, fields

from academics.models import Organization
from .models import User

logger = logging.getLogger(__name__)


class UserResource(resources.ModelResource):

    class Meta:
        model = User
        exclude = ('id',)
        import_id_fields = ()
        fields = ('first_name', 'last_name', 'role', 'group', 'username', 'plain_password')

    def before_import_row(self, row, **kwargs):
        first_name = row.get('first_name', '').strip()
        last_name = row.get('last_name', '').strip()
        group_id = row.get('group')

        logger.info(f"üì• –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º: {first_name} {last_name}, –≥—Ä—É–ø–ø–∞: {group_id}")

        if User.objects.filter(first_name=first_name, last_name=last_name, group_id=group_id).exists():
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω: {first_name} {last_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –≥—Ä—É–ø–ø–µ {group_id}")
            raise Exception(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {first_name} {last_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –≥—Ä—É–ø–ø–µ {group_id}")

        try:
            transliterated = unidecode(f"{last_name}{first_name[0]}")  # –ò–≤–∞–Ω–æ–≤–ò ‚Üí IvanovI
            base_username = slugify(transliterated).lower()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ username: {e}")
            raise

        if not base_username:
            logger.error("‚ùå slugify –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É ‚Äî –ø—Ä–æ–≤–µ—Ä—å –∏–º—è/—Ñ–∞–º–∏–ª–∏—é")
            raise Exception(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å username –∏–∑: {last_name} {first_name}")

        username = base_username

        pin = str(random.randint(0, 9999)).zfill(4)

        logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ª–æ–≥–∏–Ω: {username}, PIN: {pin}")

        row['username'] = username
        row['plain_password'] = pin
        row['_raw_password'] = pin  # –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è set_password

    def before_save_instance(self, instance, row, **kwargs):
        raw_password = row.get('_raw_password')
        if raw_password:
            instance.set_password(raw_password)
            instance.plain_password = raw_password

    def dehydrate_group(self, instance):
        return instance.group.name if instance.group else ''


class MentorResource(resources.ModelResource):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–¥–∏–Ω —Ä–∞–∑, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å N+1 –∑–∞–ø—Ä–æ—Å–æ–≤
        users = User.objects.values_list(
            "first_name", "last_name", "patronymic", "organization_id", "username"
        )

        self.existing_users = {
            (fn.strip().lower(), ln.strip().lower(), (pn or "").strip().lower(), org)
            for fn, ln, pn, org, _ in users
        }
        self.existing_usernames = {u for _, _, _, _, u in users}

    class Meta:
        model = User
        verbose_name = '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏'
        exclude = ('id',)
        import_id_fields = ()
        fields = (
            'first_name',
            'last_name',
            'patronymic',
            'email',
            'google_meet_link',
            'organization',
            'role',
            'username',
            'plain_password',   # ‚ö†Ô∏è –æ–ø–∞—Å–Ω–æ, –Ω–æ –æ—Å—Ç–∞–≤–ª—è—é –ø–æ–¥ —Ç–≤–æ–π –∫–µ–π—Å
        )

    def before_import_row(self, row, **kwargs):
        first_name = row.get('first_name', '').strip()
        last_name = row.get('last_name', '').strip()
        patronymic = (row.get("patronymic") or "").strip()
        organization_id = row.get('organization')

        logger.info(
            f"üì• –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ú–ï–ù–¢–û–†–ê: {last_name} {first_name} {patronymic}, org={organization_id},"
        )

        # --- –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        key = (first_name.lower(), last_name.lower(), patronymic.lower(), int(organization_id) if organization_id else None)
        if key in self.existing_users:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω: {last_name} {first_name} {patronymic} —É–∂–µ –µ—Å—Ç—å –≤ org={organization_id}")
            raise Exception(f"–ú–µ–Ω—Ç–æ—Ä {first_name} {last_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {organization_id}")

        # --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è username
        try:
            transliterated = unidecode(f"{last_name}{first_name[0]}")  # –ò–≤–∞–Ω–æ–≤–ò ‚Üí IvanovI
            base_username = slugify(transliterated).lower()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ username: {e}")
            raise

        if not base_username:
            raise Exception(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å username –∏–∑: {last_name} {first_name}")

        username = base_username
        counter = 1
        while username in self.existing_usernames:
            username = f"{base_username}{counter}"
            counter += 1

        # --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PIN
        pin = str(random.randint(0, 9999)).zfill(4)

        logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ª–æ–≥–∏–Ω={username}, PIN={pin}")

        row['username'] = username
        row['plain_password'] = pin  # ‚ö†Ô∏è –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å, –Ω–æ –æ—Å—Ç–∞–≤–ª—è—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
        row['_raw_password'] = pin
        row['role'] = 'mentor'

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–µ—à "—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö"
        self.existing_users.add(key)
        self.existing_usernames.add(username)

    def before_save_instance(self, instance, row, **kwargs):
        raw_password = row.get('_raw_password')
        if raw_password:
            instance.set_password(raw_password)
            # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –ø—Ä—è–º –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å:
            instance.plain_password = raw_password

    def dehydrate_organization(self, instance):
        return instance.organization.name if instance.organization else ''
